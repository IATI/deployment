#!/bin/bash
# Change directory to temporary backup
cd {{ backup_temporary_location }}

# List files from the s3 storage bucket and store them as FILES
FILELINE="$(s3cmd ls s3://{{ s3_bucket_name }} | tail -1)"

# Use cut to extract the bucket file path for the last file
FILEPATH="$(cut -d' ' -f4 <<< $FILELINE)"

# Use cut again to extract just the filename from the path
FILENAME="$(cut -d'/' -f4 <<< $FILEPATH)"

# Download the recovery file from s3 storage bucket
s3cmd get $FILEPATH

# Unzip the downloaded file
tar -xzf $FILENAME

# Delete the original file
rm $FILENAME


# Drop everything owned by iati-website from the database
psql -U {{ db_user }} -d {{ custom_database_name }} -c 'DROP OWNED BY "{{ db_user }}" CASCADE;'

# Decrypt the pg_dump backup and load it into postgres
openssl enc -d -aes-256-cbc -pass pass:{{ backup_encryption_key }} -p -in {{ backup_directory }}backup.sql -base64 | psql -d {{ custom_database_name }}

# Remove the original media folder
rm -rf {{ django_dir }}media

# Move the media folder from the backup directory back to it's proper place
cp -r {{ backup_directory }}media {{ django_dir }}

# Let www-data group re-own the media folder recursively
chgrp -R www-data {{ django_dir }}media